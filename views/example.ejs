<!DOCTYPE html>
<html lang="en">

<head>
    <title>three.js raycast - texture</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">

    <style>
        body {
            background-color: #fff;
            color: #444;
        }

        a {
            color: #08f;
        }

        #controls {
            position: absolute;
            text-align: left;
            top: 60px;
            left: 5px;
            padding: 5px;
        }

        .control {
            margin-bottom: 3px;
        }

        input {
            width: 50px;
        }
    </style>
</head>

<body>
    <div id="container"></div>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/108/three.js"></script>
    <script src="lib/TrackballControls.js"></script>
    <script>
        var CanvasTexture = function (parentTexture) {
            this._canvas = document.createElement("canvas");
            this._canvas.width = this._canvas.height = 1024;
            this._context2D = this._canvas.getContext("2d");
            
            this._parentTexture.push(parentTexture);
            parentTexture.image = this._canvas;

            this._background = document.createElement("img");
            this._background.src = "img/uv_grid_opengl.jpg";

            this._draw();
            
        };
        CanvasTexture.prototype = {
            constructor: CanvasTexture,
            _canvas: null,
            _context2D: null,
            _xCross: 0,
            _yCross: 0,
            _crossThickness: 1,
            _parentTexture: [],

            setCrossPosition: function (x, y) {
                this._xCross = x * this._canvas.width;
                this._yCross = y * this._canvas.height;
                this._draw();
            },
            _draw: function () {
                this._context2D.clearRect(0, 0, this._canvas.width, this._canvas.height);
                // Background.
                //this._context2D.drawImage(this._background, 0, 0);
                // Yellow cross.
                this._context2D.lineWidth =  6;
                this._context2D.strokeStyle = "#FFFF00";
                this._context2D.beginPath();

                this._context2D.arc(this._xCross, this._yCross, 5, 0, 2, false);
                this._context2D.stroke();
                for (var i = 0; i < this._parentTexture.length; i++) {
                    this._parentTexture[i].needsUpdate = true;
                }
            }
        };
        var width = window.innerWidth;
        var height = window.innerHeight;
        var canvas;
        var sphereTexture;
        var container;
        var camera, scene, renderer;
        var raycaster = new THREE.Raycaster();
        var mouse = new THREE.Vector2();
        var onClickPosition = new THREE.Vector2();
        init();
        render();

        var controls;

        function init() {
            container = document.getElementById("container");
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0xeeeeee);
            camera = new THREE.PerspectiveCamera(45, width / height, 1, 1000);
            camera.position.x = 0;
            camera.position.y = 0;
            camera.position.z = -16;
            camera.lookAt(scene.position);
            renderer = new THREE.WebGLRenderer();
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.setSize(width, height);
            container.appendChild(renderer.domElement);
            controls = new THREE.TrackballControls(camera, renderer.domElement);

            // A sphere, in the middle.
            sphereTexture = new THREE.Texture(undefined);
            canvas = new CanvasTexture(sphereTexture);
            var sphereMaterial = new THREE.MeshBasicMaterial({ map: sphereTexture });
            var sphereGeometry = new THREE.SphereBufferGeometry(5, 32, 32);

            var sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);

            scene.add(sphere);

            container.addEventListener('mousemove', onMouseMove, false);

        }
        console.log(scene.children)
        function onMouseMove(evt) {
            evt.preventDefault();
            var array = getMousePosition(container, evt.clientX, evt.clientY);
            onClickPosition.fromArray(array);
            var intersects = getIntersects(onClickPosition, scene.children);
            //console.log(intersects)
            if (intersects.length > 0 && intersects[0].uv) {
                var uv = intersects[0].uv;
                intersects[0].object.material.map.transformUv(uv);
                //console.log(uv.x, uv.y)
                canvas.setCrossPosition(uv.x, uv.y);
            }
        }
        var getMousePosition = function (dom, x, y) {
            var rect = dom.getBoundingClientRect();
            return [(x - rect.left) / rect.width, (y - rect.top) / rect.height];
        };
        var getIntersects = function (point, objects) {
            mouse.set((point.x * 2) - 1, - (point.y * 2) + 1);
            raycaster.setFromCamera(mouse, camera);
            return raycaster.intersectObjects(objects);
        };
        function render() {
            requestAnimationFrame(render);
            renderer.render(scene, camera);
            controls.update();
        }
    </script>
</body>

</html>